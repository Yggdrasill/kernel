This is the readme for the boot/ directory. Filenames should be searchable with
a case-insensitive search.

-- bios.s

 This file contains a few BIOS interrupt call wrappers. The print function uses
 the BIOS to put text on the screen, for example. The error function calls
 print and then halts.

 Other functions may need a little bit of an explanation. The reset function uses
 BIOS interrupt call int 0x13 ah=0x00 dl=drive to reset the disk drive, whether
 it be a floppy or a hard drive, which forces the drive to place its head at the
 first track, and makes the drive execute the next command as if it was in its
 initial state. This is done before a read operation just to be sure.

 The read function uses a relatively complex BIOS function call in which quite
 a few registers have to be set. It uses the int 0x13 ah=0x02 dl=drive BIOS
 interrupt call. For whatever reason, instead of the typical es:di combination
 for a memory pointer, this particular call requires es:bx to be the buffer
 pointer. The dh register tells the BIOS what head to read with, the al
 register is the number of sectors to read into memory. The cx register
 specifies where to read from, where ch is the track number and cl is the
 sector number (both counting from zero of course).

-- a20.s

 This is the code to enable the A20 gate. The A20 gate is a consequence of x86
 backwards compatibility. Specifically, the original 8086 processor had two
 16-bit registers to address memory, and instead of just putting both linearly
 on the address bus, Intel decided that it'd be more desireable to shift the
 segment register 4 bits left so they could instead address 2^20 bytes. The
 offset register is *not* shifted, and with a segment register of 0xFFFF and
 and offset register of 0xFFFF, you can actually address 64kiB - 15B past 1MiB.

 (0xFFFF << 4) + 0xFFFF = 0x10FFEF

 The 8086 actually had a 24 bit address bus, and so when addressing memory
 limited to 20 bits, from the memory's point of view, the address bus would
 wrap around to 0 when passing the 1MiB address. Some programmers actually
 used this "feature", and since Intel are backwards compatibility fanatics
 they kept it in every following processor since then and it has become a
 permanent part of the x86 processor architecture.

 We can test the A20 gate by abusing the wraparound behavior. By testing what
 would be the same address after wraparound, we can compare the two words, and
 if they are the same, it's highly likely that that the A20 gate is not
 enabled. We are testing the terminating two bytes of the MBR header, 0xAA55.

 There are multiple ways to enable the A20 gate, and all implemented here need
 to be tried, because all of them may not work. They are tried in this order:

 - Ask the BIOS to do it. Ignore the response and test the address bus again,
   because the BIOS can lie about it.
 - Intel saw that there was a spare pin on the PS/2 keyboard controller, so
   they routed the A20 gate through there. Thus, this is one way to enable it.
 - Try an access of I/O port 0xEE. This does not work in QEMU, so it is
   untested, but it should work on a machine that supports it.
 - Fast A20 Enable is a feature of some motherboards, but is not guaranteed to
   work. Writing to this I/O port can have completely different effects or
   crash the machine, so this should be tried last.

 If none of the above work, we give up.

 Note that QEMU needs a SeaBIOS binary without the "enable A20" option in order
 to test this code, because if it is compiled with the "enable A20" option,
 naturally there would be no need to enable it, or even try. If you do build a
 SeaBIOS binary with the A20 gate disabled, you need to also run QEMU without
 the -enable-kvm switch, because as far as I can tell, -enable-kvm implicitly
 enables the A20 gate regardless of the SeaBIOS binary.

-- mmap.s

 The (rather long) function found here calls the BIOS to provide us with a
 map of usable, reserved and unknown memory. The specific BIOS function called
 is interrupt 0x15 eax=0xE820, and specific documentation for the behavior of
 this BIOS call is easy to find just about everywhere.

 Short description: The BIOS provides us with a memory map in es:di, and the di
 register is not incremented. The BIOS keeps a "continuation value" in the ebx
 register, and the way we determine the end of the memory map is when ebx == 0.

-- pmode.s

 These functions take care of actually putting the processor into 32-bit
 protected mode. A requirement for this is to provide the processor with
 a global descriptor table and an interrupt descriptor table. We provide
 the processor with a GDT that describes a flat memory structure, 4GB long.
 The GDT contains an eight byte long null descriptor, a code descriptor and
 a data descriptor. The base address is 0, and the limit is 0xFFFFF. The
 "granularity" bit is set, and so the limit is multiplied by 4096.

 0xFFFFF * 4096 = 4GiB

 We also provide the processor with a completely bogus IDT, and so interrupts
 ***MUST*** be disabled before we set the interrupt descriptor table, otherwise
 we risk triple-faulting the processor by sending it to a completely invalid
 interrupt handler. Interrupts should not be enabled from this point onwards,
 until we set up a proper IDT.

 The pmode_init function set's the protected mode bit in the CR0 register.
 After this point, we are officially in protected mode.

-- vga.s

 This just sets up the VGA mode to an 80x25 text mode with colour. It also
 makes the hardware cursor invisible.

-- stage2.c

 This is the entry point for stage 2. Do note that there should never, ever be
 any function in this file except main(). The reason for this is that the
 compiler may reorder functions at will, and forcing the linker to always keep
 main() on top of the flat binary to ensure the correct entry point is used
 has turned out to be either impossible or difficult without using
 GCC-specific pragmas, which I don't want to do. The linker instead puts this
 file on top of the text segment, which is very easy to make it do, and since
 main() is the only function here it should always be the entry point.

 main() should *never* return. There is no return pointer on the stack, and so
 if it ever returns it could turn out to be very ugly. If execution needs to
 stop the programmer should disable interrupts and use inline asm for the hlt
 instruction.

 Note that all __asm__ should be followed by the volatile keyword to prevent
 the compiler from optimising it out of the code.

 System state at this point:

 - The A20 gate should be enabled before entering main()
 - The IDT should be installed and it should be zero length at address zero
 - The GDT should be installed and have a flat memory map, both the code and
   data descriptor
 - Protected mode should be enabled
 - The EFLAGS register should be cleared
 - The PIC should have all interrupts masked

 What should be done in stage 2:

 - The bootloader should set up a relatively usable IDT, although the kernel
   will very likely want to replace it later. This is needed because we want
   the keyboard to work.
 - The bootloader should unmask some of the interrupts on the 8259 PICs, for
   example the keyboard interrupt.
 - It should find the boot partition (partition table should be in memory at
   0x7DBE) and read the hard drive.
 - The partition should be an ext2 partition and the bootloader should read
   it, find a configuration file which will tell it what the kernel image is
   called and what it should put on the kernel command line.
 - It should be able to parse ELF executables, because that's likely what the
   kernel will use.
 - It should not set video mode, nor should it ever enter v8086 mode.

 Preferably, the code for the ATA driver and ext2 driver should be shared with
 the kernel, although of course, since this will be a flat binary file, it
 will be statically linked.


